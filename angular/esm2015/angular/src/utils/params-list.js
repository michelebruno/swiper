/* underscore in name -> watch for changes */
export const paramsList = [
    'init',
    '_direction',
    'touchEventsTarget',
    'initialSlide',
    '_speed',
    'cssMode',
    'updateOnWindowResize',
    'resizeObserver',
    'nested',
    'focusableElements',
    '_width',
    '_height',
    'preventInteractionOnTransition',
    'userAgent',
    'url',
    '_edgeSwipeDetection',
    '_edgeSwipeThreshold',
    '_freeMode',
    '_freeModeMomentum',
    '_freeModeMomentumRatio',
    '_freeModeMomentumBounce',
    '_freeModeMomentumBounceRatio',
    '_freeModeMomentumVelocityRatio',
    '_freeModeSticky',
    '_freeModeMinimumVelocity',
    '_autoHeight',
    'setWrapperSize',
    'virtualTranslate',
    '_effect',
    'breakpoints',
    '_spaceBetween',
    '_slidesPerView',
    '_slidesPerColumn',
    '_slidesPerColumnFill',
    '_slidesPerGroup',
    '_slidesPerGroupSkip',
    '_centeredSlides',
    '_centeredSlidesBounds',
    '_slidesOffsetBefore',
    '_slidesOffsetAfter',
    'normalizeSlideIndex',
    '_centerInsufficientSlides',
    '_watchOverflow',
    'roundLengths',
    'touchRatio',
    'touchAngle',
    'simulateTouch',
    '_shortSwipes',
    '_longSwipes',
    'longSwipesRatio',
    'longSwipesMs',
    '_followFinger',
    'allowTouchMove',
    '_threshold',
    'touchMoveStopPropagation',
    'touchStartPreventDefault',
    'touchStartForcePreventDefault',
    'touchReleaseOnEdges',
    'uniqueNavElements',
    '_resistance',
    '_resistanceRatio',
    '_watchSlidesProgress',
    '_watchSlidesVisibility',
    '_grabCursor',
    'preventClicks',
    'preventClicksPropagation',
    '_slideToClickedSlide',
    '_preloadImages',
    'updateOnImagesReady',
    '_loop',
    '_loopAdditionalSlides',
    '_loopedSlides',
    '_loopFillGroupWithBlank',
    'loopPreventsSlide',
    '_allowSlidePrev',
    '_allowSlideNext',
    '_swipeHandler',
    '_noSwiping',
    'noSwipingClass',
    'noSwipingSelector',
    'passiveListeners',
    'containerModifierClass',
    'slideClass',
    'slideBlankClass',
    'slideActiveClass',
    'slideDuplicateActiveClass',
    'slideVisibleClass',
    'slideDuplicateClass',
    'slideNextClass',
    'slideDuplicateNextClass',
    'slidePrevClass',
    'slideDuplicatePrevClass',
    'wrapperClass',
    'runCallbacksOnInit',
    'observer',
    'observeParents',
    'observeSlideChildren',
    // modules
    'a11y',
    'autoplay',
    '_controller',
    'coverflowEffect',
    'cubeEffect',
    'fadeEffect',
    'flipEffect',
    'hashNavigation',
    'history',
    'keyboard',
    'lazy',
    'mousewheel',
    '_navigation',
    '_pagination',
    'parallax',
    '_scrollbar',
    '_thumbs',
    'virtual',
    'zoom',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1zLWxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYW5ndWxhci9zcmMvdXRpbHMvcGFyYW1zLWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkNBQTZDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRztJQUN4QixNQUFNO0lBQ04sWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsUUFBUTtJQUNSLFNBQVM7SUFDVCxzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLFFBQVE7SUFDUixtQkFBbUI7SUFDbkIsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQ0FBZ0M7SUFDaEMsV0FBVztJQUNYLEtBQUs7SUFDTCxxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLHlCQUF5QjtJQUN6Qiw4QkFBOEI7SUFDOUIsZ0NBQWdDO0lBQ2hDLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULGFBQWE7SUFDYixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixpQkFBaUI7SUFDakIsdUJBQXVCO0lBQ3ZCLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIscUJBQXFCO0lBQ3JCLDJCQUEyQjtJQUMzQixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLFlBQVk7SUFDWixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7SUFDZCxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLCtCQUErQjtJQUMvQixxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixhQUFhO0lBQ2IsZUFBZTtJQUNmLDBCQUEwQjtJQUMxQixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLHFCQUFxQjtJQUNyQixPQUFPO0lBQ1AsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZix5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsZUFBZTtJQUNmLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQix3QkFBd0I7SUFDeEIsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLGNBQWM7SUFDZCxvQkFBb0I7SUFDcEIsVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFFdEIsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sWUFBWTtJQUNaLGFBQWE7SUFDYixhQUFhO0lBQ2IsVUFBVTtJQUNWLFlBQVk7SUFDWixTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07Q0FDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdW5kZXJzY29yZSBpbiBuYW1lIC0+IHdhdGNoIGZvciBjaGFuZ2VzICovXHJcbmV4cG9ydCBjb25zdCBwYXJhbXNMaXN0ID0gW1xyXG4gICdpbml0JyxcclxuICAnX2RpcmVjdGlvbicsXHJcbiAgJ3RvdWNoRXZlbnRzVGFyZ2V0JyxcclxuICAnaW5pdGlhbFNsaWRlJyxcclxuICAnX3NwZWVkJyxcclxuICAnY3NzTW9kZScsXHJcbiAgJ3VwZGF0ZU9uV2luZG93UmVzaXplJyxcclxuICAncmVzaXplT2JzZXJ2ZXInLFxyXG4gICduZXN0ZWQnLFxyXG4gICdmb2N1c2FibGVFbGVtZW50cycsXHJcbiAgJ193aWR0aCcsXHJcbiAgJ19oZWlnaHQnLFxyXG4gICdwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24nLFxyXG4gICd1c2VyQWdlbnQnLFxyXG4gICd1cmwnLFxyXG4gICdfZWRnZVN3aXBlRGV0ZWN0aW9uJyxcclxuICAnX2VkZ2VTd2lwZVRocmVzaG9sZCcsXHJcbiAgJ19mcmVlTW9kZScsXHJcbiAgJ19mcmVlTW9kZU1vbWVudHVtJyxcclxuICAnX2ZyZWVNb2RlTW9tZW50dW1SYXRpbycsXHJcbiAgJ19mcmVlTW9kZU1vbWVudHVtQm91bmNlJyxcclxuICAnX2ZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbycsXHJcbiAgJ19mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbycsXHJcbiAgJ19mcmVlTW9kZVN0aWNreScsXHJcbiAgJ19mcmVlTW9kZU1pbmltdW1WZWxvY2l0eScsXHJcbiAgJ19hdXRvSGVpZ2h0JyxcclxuICAnc2V0V3JhcHBlclNpemUnLFxyXG4gICd2aXJ0dWFsVHJhbnNsYXRlJyxcclxuICAnX2VmZmVjdCcsXHJcbiAgJ2JyZWFrcG9pbnRzJyxcclxuICAnX3NwYWNlQmV0d2VlbicsXHJcbiAgJ19zbGlkZXNQZXJWaWV3JyxcclxuICAnX3NsaWRlc1BlckNvbHVtbicsXHJcbiAgJ19zbGlkZXNQZXJDb2x1bW5GaWxsJyxcclxuICAnX3NsaWRlc1Blckdyb3VwJyxcclxuICAnX3NsaWRlc1Blckdyb3VwU2tpcCcsXHJcbiAgJ19jZW50ZXJlZFNsaWRlcycsXHJcbiAgJ19jZW50ZXJlZFNsaWRlc0JvdW5kcycsXHJcbiAgJ19zbGlkZXNPZmZzZXRCZWZvcmUnLFxyXG4gICdfc2xpZGVzT2Zmc2V0QWZ0ZXInLFxyXG4gICdub3JtYWxpemVTbGlkZUluZGV4JyxcclxuICAnX2NlbnRlckluc3VmZmljaWVudFNsaWRlcycsXHJcbiAgJ193YXRjaE92ZXJmbG93JyxcclxuICAncm91bmRMZW5ndGhzJyxcclxuICAndG91Y2hSYXRpbycsXHJcbiAgJ3RvdWNoQW5nbGUnLFxyXG4gICdzaW11bGF0ZVRvdWNoJyxcclxuICAnX3Nob3J0U3dpcGVzJyxcclxuICAnX2xvbmdTd2lwZXMnLFxyXG4gICdsb25nU3dpcGVzUmF0aW8nLFxyXG4gICdsb25nU3dpcGVzTXMnLFxyXG4gICdfZm9sbG93RmluZ2VyJyxcclxuICAnYWxsb3dUb3VjaE1vdmUnLFxyXG4gICdfdGhyZXNob2xkJyxcclxuICAndG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uJyxcclxuICAndG91Y2hTdGFydFByZXZlbnREZWZhdWx0JyxcclxuICAndG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQnLFxyXG4gICd0b3VjaFJlbGVhc2VPbkVkZ2VzJyxcclxuICAndW5pcXVlTmF2RWxlbWVudHMnLFxyXG4gICdfcmVzaXN0YW5jZScsXHJcbiAgJ19yZXNpc3RhbmNlUmF0aW8nLFxyXG4gICdfd2F0Y2hTbGlkZXNQcm9ncmVzcycsXHJcbiAgJ193YXRjaFNsaWRlc1Zpc2liaWxpdHknLFxyXG4gICdfZ3JhYkN1cnNvcicsXHJcbiAgJ3ByZXZlbnRDbGlja3MnLFxyXG4gICdwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24nLFxyXG4gICdfc2xpZGVUb0NsaWNrZWRTbGlkZScsXHJcbiAgJ19wcmVsb2FkSW1hZ2VzJyxcclxuICAndXBkYXRlT25JbWFnZXNSZWFkeScsXHJcbiAgJ19sb29wJyxcclxuICAnX2xvb3BBZGRpdGlvbmFsU2xpZGVzJyxcclxuICAnX2xvb3BlZFNsaWRlcycsXHJcbiAgJ19sb29wRmlsbEdyb3VwV2l0aEJsYW5rJyxcclxuICAnbG9vcFByZXZlbnRzU2xpZGUnLFxyXG4gICdfYWxsb3dTbGlkZVByZXYnLFxyXG4gICdfYWxsb3dTbGlkZU5leHQnLFxyXG4gICdfc3dpcGVIYW5kbGVyJyxcclxuICAnX25vU3dpcGluZycsXHJcbiAgJ25vU3dpcGluZ0NsYXNzJyxcclxuICAnbm9Td2lwaW5nU2VsZWN0b3InLFxyXG4gICdwYXNzaXZlTGlzdGVuZXJzJyxcclxuICAnY29udGFpbmVyTW9kaWZpZXJDbGFzcycsXHJcbiAgJ3NsaWRlQ2xhc3MnLFxyXG4gICdzbGlkZUJsYW5rQ2xhc3MnLFxyXG4gICdzbGlkZUFjdGl2ZUNsYXNzJyxcclxuICAnc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcycsXHJcbiAgJ3NsaWRlVmlzaWJsZUNsYXNzJyxcclxuICAnc2xpZGVEdXBsaWNhdGVDbGFzcycsXHJcbiAgJ3NsaWRlTmV4dENsYXNzJyxcclxuICAnc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MnLFxyXG4gICdzbGlkZVByZXZDbGFzcycsXHJcbiAgJ3NsaWRlRHVwbGljYXRlUHJldkNsYXNzJyxcclxuICAnd3JhcHBlckNsYXNzJyxcclxuICAncnVuQ2FsbGJhY2tzT25Jbml0JyxcclxuICAnb2JzZXJ2ZXInLFxyXG4gICdvYnNlcnZlUGFyZW50cycsXHJcbiAgJ29ic2VydmVTbGlkZUNoaWxkcmVuJyxcclxuXHJcbiAgLy8gbW9kdWxlc1xyXG4gICdhMTF5JyxcclxuICAnYXV0b3BsYXknLFxyXG4gICdfY29udHJvbGxlcicsXHJcbiAgJ2NvdmVyZmxvd0VmZmVjdCcsXHJcbiAgJ2N1YmVFZmZlY3QnLFxyXG4gICdmYWRlRWZmZWN0JyxcclxuICAnZmxpcEVmZmVjdCcsXHJcbiAgJ2hhc2hOYXZpZ2F0aW9uJyxcclxuICAnaGlzdG9yeScsXHJcbiAgJ2tleWJvYXJkJyxcclxuICAnbGF6eScsXHJcbiAgJ21vdXNld2hlZWwnLFxyXG4gICdfbmF2aWdhdGlvbicsXHJcbiAgJ19wYWdpbmF0aW9uJyxcclxuICAncGFyYWxsYXgnLFxyXG4gICdfc2Nyb2xsYmFyJyxcclxuICAnX3RodW1icycsXHJcbiAgJ3ZpcnR1YWwnLFxyXG4gICd6b29tJyxcclxuXTtcclxuIl19